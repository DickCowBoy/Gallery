apply plugin: 'com.android.application'

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation "com.android.support:appcompat-v7:$rootProject.ext.support_version"
    implementation "com.android.support:recyclerview-v7:$rootProject.ext.support_version"
    implementation "com.android.support:cardview-v7:$rootProject.ext.support_version"
    implementation "com.android.support:design:$rootProject.ext.support_version"
    implementation "com.android.support:support-v4:$rootProject.ext.support_version"
    implementation "com.android.support:support-fragment:$rootProject.ext.support_version"
    implementation "com.android.support:support-vector-drawable:$rootProject.ext.tp_version"
    // add rxjava+rxandroid
    implementation 'io.reactivex.rxjava2:rxandroid:2.0.1'
    implementation 'io.reactivex.rxjava2:rxjava:2.0.1'
    // add leak canary
    debugImplementation 'com.squareup.leakcanary:leakcanary-android:1.5.4'
    releaseImplementation 'com.squareup.leakcanary:leakcanary-android-no-op:1.5.4'
    // add glide
    implementation 'com.github.bumptech.glide:glide:4.4.0@aar'
    implementation 'com.github.bumptech.glide:annotations:4.4.0'
    implementation 'com.github.bumptech.glide:gifdecoder:4.4.0'
    implementation 'com.github.bumptech.glide:disklrucache:4.4.0'
    annotationProcessor 'com.github.bumptech.glide:compiler:4.4.0'
    implementation 'com.google.guava:guava:22.0-android'
    implementation 'com.tplink.support:support-tpwidgets-release:27.1.+'

}

android {
    compileSdkVersion rootProject.ext.compileSdkVersion as int
    //buildTools目前服务器版本是24.0.3
    buildToolsVersion rootProject.ext.buildToolsVersion

    defaultConfig {
        applicationId "com.tplink.gallery"
        minSdkVersion rootProject.ext.minSdkVersion as int
        targetSdkVersion rootProject.ext.targetSdkVersion as int
        versionCode 10001
        versionName "1.0"
    }

    //指定java版本1.7
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    //读取keystore文件
    File propFile = file('/var/lib/jenkins/gradle_env/keystore/signing.properties');
    if (propFile.exists()) {
        def Properties props = new Properties()
        props.load(new FileInputStream(propFile))
        if (props.containsKey('key.store') && props.containsKey('key.store.password') &&
                props.containsKey('key.alias') && props.containsKey('key.alias.password')) {
            android.signingConfigs.release.storeFile = file(props['key.store'])
            android.signingConfigs.release.storePassword = props['key.store.password']
            android.signingConfigs.release.keyAlias = props['key.alias']
            android.signingConfigs.release.keyPassword = props['key.alias.password']
        } else {
            android.buildTypes.release.signingConfig = null
        }
    } else {
        android.buildTypes.release.signingConfig = null
    }

    buildTypes {
        debug {
            // 显示Log
            buildConfigField "boolean", "LOG_DEBUG", "true"
            //不去除无用代码
            minifyEnabled false
            //不进行对齐
            zipAlignEnabled false
            //不去除无用资源
            shrinkResources false
        }

        release {
            // 不显示Log
            buildConfigField "boolean", "LOG_DEBUG", "false"
            // 去除无用代码
            minifyEnabled true
            // 进行对齐
            zipAlignEnabled true
            // 移除无用的资源
            shrinkResources true
            // 配置混淆
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard.flags'
            // 配置签名（本地编译时可以先注释这句）
            //signingConfig signingConfigs.release
            lintOptions {
                disable 'MissingTranslation'
            }
        }
    }
    flavorDimensions "api", "dpi"
    productFlavors {

        api27 {
            dimension "api"
            targetSdkVersion 27
        }

        alldpi{
            dimension "dpi"
            // 所有资源
        }
        hdpi {
            dimension "dpi"
            //只保留hdpi资源
            resConfigs  "hdpi"
        }
        xhdpi {
            dimension "dpi"
            //只保留xhdpi资源
            resConfigs  "xhdpi"
        }
        xxhdpi {
            dimension "dpi"
            //只保留xxhdpi资源
            resConfigs  "xxhdpi"
        }
    }

    //重命名apk
    // 各模块修改此变量即可
    final def prefix = "TPGallery2"
    final def separator = "_"
    final def debug = "debug"
    final def ver = ['api27': '8.1']
    final def suffix = ".apk"
    applicationVariants.all { variant ->
        variant.outputs.all { output ->
            def dpi = variant.productFlavors[1].name
            dpi = (dpi == "alldpi" ? "" : "$dpi$separator")
            def name = "$prefix$separator" +
                    (variant.buildType.name == debug ? "$debug$separator" : "") +
                    dpi + ver[variant.productFlavors[0].name] + suffix
            outputFileName = name
        }
    }

    // debug包不需要按分辨率打包
    variantFilter { variant ->
        if (variant.buildType.name == 'debug') {
            variant.getFlavors().each() { flavor ->
                variant.setIgnore(flavor.name != 'alldpi')
            }
        }
    }

    //拷贝生成的apk到统一的路径
    applicationVariants.all { variant ->
        variant.assemble.doLast {
            variant.outputs.each { output ->
                def path = output.outputFile.absolutePath
                copy {
                    from(path)
                    into('../apks')
                }
            }
        }
    }

    lintOptions {
        //忽略lint error
        abortOnError false
    }
}

gradle.projectsEvaluated {
    // 需要添加这一行，这段是找到配置的依赖项中的mtk-framework，优先使用它里面的方法，
    // 由于现在使用compileOnly关键字声明对mtk-framework的依赖，因此需要换成compileOnly
    configurations.compileOnly.setCanBeResolved(true)
    configurations.compileOnly.each {
        String path = it.toString()
        if (path.contains("framework")) {
            tasks.withType(JavaCompile) {
                options.compilerArgs << '-Xbootclasspath/p:' + path
            }
        }
    }
}

preBuild {
    doLast {
        def imlFile = file(project.name + ".iml")
        try {
            def parsedXml = (new XmlParser()).parse(imlFile)
            def jdkNode = parsedXml.component[1].orderEntry.find {
                it.'@type' == 'jdk'
            }
            parsedXml.component[1].remove(jdkNode)
            def sdkString = "Android API " + android.compileSdkVersion.substring("android-".length()) + " Platform"
            new Node(parsedXml.component[1], 'orderEntry', ['type': 'jdk', 'jdkName': sdkString, 'jdkType': 'Android SDK'])
            groovy.xml.XmlUtil.serialize(parsedXml, new FileOutputStream(imlFile))
        } catch (FileNotFoundException e) {
            // nop, iml not found
        }
    }
}